---
title: "FocalProject_VegCleaning"
format: html
editor: visual
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

# Vegetation Data Cleaning

## Loading Packages and Dataset

```{r}
library(readr)
library(readxl)
library(vegan)
Veg <- read_csv("ecoatlas_wetlandcondition_plants.csv")
Native_Plants <- read_xls("All_plants_Native_to_California_Detailed.xls")
CRAMClean <- read_xlsx("CRAMSitesClean.xlsx")
Confirmed_Sites <- read.csv("ConfirmedSite.csv")
CRAM_sites_plants <- read_xlsx("CRAM_Sites_Plants.xlsx")
```

```{r}
install.packages("taxize")
install.packages("seqinr")
install.packages("fuzzyjoin")
library(taxize)
library(magrittr)
library(dplyr)
library(tidyverse)
library(bold)    # API interface to BOLD
library(seqinr)  # for FASTA output
library(rentrez)
library(readxl)
library(usethis)
library(stringr)
library(Hmisc) 
library(clipr)
library(knitr)
library(ggsci)
library(janeaustenr)
library(fuzzyjoin)
```

```{r}
ecoatlas_wetlandcondition_plants <- read_csv("ecoatlas_wetlandcondition_plants.csv")
NEW_CRAM_Sites <- 
  read_excel("C:/Users/g2kea/OneDrive/Desktop/StreamsProj/Data/NEW_CRAM_Sites4.xlsx", 
                             sheet = "ConfirmedSitesWithControls")



Site_plants <- ecoatlas_wetlandcondition_plants %>% 
  filter(ecramid %in% NEW_CRAM_Sites$ecramid)


taxa_table <- Site_plants


## Select column with taxa names  
lst <- unique(as.list(taxa_table$scientificname))

## Remove extra spaces around names 
lst<- str_squish(lst)


## Global Name Resolver for spelling mistakes 
taxa_table_gnr <-gnr_resolve(sci = as.character(lst), best_match_only = T, with_canonical_ranks=T)

## Check for taxa which got dropped by gnr 
Missing_GNR <- setdiff(taxa_table$scientificname, taxa_table_gnr$user_supplied_name)

##Check taxa dropped by GNR using Tree of Life resolver 
Missing_GNR <- tol_resolve(Missing_GNR, context_name = "All life")

##Filter successful GNR by scores. Below .5 not accurate enough  
Success_GNR <- taxa_table_gnr %>% 
  filter(score > .5)
Failed_GNR <- taxa_table_gnr %>% 
  filter( score <= .5) 


##If no GNR scores below .5, return empty df. Other wise check taxa with TOL resolver
if (dim(Failed_GNR)[1] == 0) {
  Fixed_TOL <- Missing_GNR[0,]
}else{
  Fixed_TOL <- tol_resolve(unique(Failed_GNR$submitted_name), context_name = "All life")
}

## TOL resolve on successful GNR  
taxa_table_tol <- tol_resolve(unique(Success_GNR$matched_name2), context_name = "All life")


##Check for taxa missed by TOL and with poor scores  
Missing_TOL <- taxa_table_tol %>%
  filter(is.na(unique_name) | score < .9)


##Add missing taxa from GNR to missing TOL 
Missing_TOL <- bind_rows(
  Missing_TOL,
  Missing_GNR) %>% 
  filter(is.na(unique_name) | score < .9 )

## save missing GNR that got fixed by TOL 
Missing_GNR <- Missing_GNR %>% 
  filter(!is.na(unique_name))


##Filter for successful TOL with scores over .9 
Success_TOL <- taxa_table_tol %>% 
  filter(score >= .9)

##Filter for successful TOL from failed GNR's 
Fixed_TOL<- Fixed_TOL %>% 
  filter(score >= .9)


##Combine all fixed and succesful results 
taxa_table_tol <- bind_rows(Success_TOL, Missing_GNR, Fixed_TOL)

##Remove TOL output addition of "(class in kingdom...)" select just first word which is correct taxa 

taxa_table_tol2 <- taxa_table_tol %>%
  filter(str_detect(unique_name, " in ")) %>% 
  mutate(unique_name = word(unique_name, 1))
taxa_table_tol <- taxa_table_tol %>% 
  filter(!str_detect(unique_name, " in ")) %>%
  rbind(taxa_table_tol2)


##Final list for BOLD check
lst_tol <- unique(taxa_table_tol$unique_name)


##Compiling spelling changes and synonym changes 
SpellChangeGNR <- Success_GNR %>%
  subset(submitted_name != matched_name2) %>%
  select(submitted_name, matched_name2) %>%
  rename("OriginalName" = submitted_name,
         "SpellChange" = matched_name2)

SpellChangeTOL <- taxa_table_tol %>%
  mutate(search_string = capitalize(search_string)) %>%
  subset(search_string != unique_name) %>%
  filter(is_synonym == FALSE) %>%
  select(search_string, unique_name) %>%
  rename("OriginalName" = search_string,
         "SpellChange" = unique_name)


SpellChange <- rbind(SpellChangeGNR, SpellChangeTOL)

TOL_Synonyms <- taxa_table_tol %>%
  filter(is_synonym == TRUE) %>%
  select(search_string, unique_name) %>%
  rename("OriginalName" = search_string,
         "Synonym" = unique_name)

##Taxa missing from GNR and TOL databases
Absent_taxa <- Missing_TOL 

# lst_tol <- unique(taxa_table_tol$unique_name)
# Taxa_check <- sapply(lst_tol, bold_search)
# Taxa_final <- bind_rows(Taxa_check)





# CRAM_PlantJoin <- left_join(Site_plants, select(SpellChange, SpellChange), by = c("scientificname" = "OriginalName"))


CRAM_PlantJoin <- left_join(Site_plants, SpellChange, by = c("scientificname" = "OriginalName"))

CRAM_PlantJoin <- regex_left_join(CRAM_PlantJoin,TOL_Synonyms,by=c("scientificname" = "OriginalName"), ignore_case =TRUE)

CRAM_PlantJoin <- CRAM_PlantJoin %>% 
  select(-OriginalName) 



CRAM_PlantJoin$Final_ID <- ifelse(is.na(CRAM_PlantJoin$SpellChange), CRAM_PlantJoin$scientificname, CRAM_PlantJoin$SpellChange)

CRAM_PlantJoin$Final_ID <- ifelse(is.na(CRAM_PlantJoin$Synonym), CRAM_PlantJoin$Final_ID, CRAM_PlantJoin$Synonym)


list_taxa <- as.character(as.list(unique(CRAM_PlantJoin$Final_ID)))
taxa_ranking <- tax_rank(list_taxa, db ="gbif", rows = 1)
taxa_ranking2 <- as.data.frame(do.call(rbind, taxa_ranking))
taxa_ranking2 <- rownames_to_column(taxa_ranking2, "Final_ID")
taxa_ranking2 <- taxa_ranking2 %>%
  rename("tax_rank" = V1)


CRAM_PlantJoin <- left_join(CRAM_PlantJoin, taxa_ranking2, by = "Final_ID")
# CRAM_PlantJoin <- regex_left_join(CRAM_PlantJoin,SpellChange,by=c("scientificname" = "OriginalName"), ignore_case =TRUE)
# 

write_clip(CRAM_PlantJoin)


```

#BETA D

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
1 + 1
```

You can add options to executable code like this

```{r}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed).
