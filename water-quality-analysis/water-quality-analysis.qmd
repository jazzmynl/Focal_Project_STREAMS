---
title: "Water Quality Cleaning"
author: "Sully Riley"
format: html
editor: visual
---

## Import Libraries

```{r}
library(tidyverse)
library(assertthat)
library(vegan)
library(factoextra)
library(gridExtra)
```

## Setup Helpers

```{r}
SHOULD_RUN_ASSERTIONS = T

SHOULD_WRITE_FILES = F

FIGURE_WIDTH = 6
FIGURE_HEIGHT = 4

assert = function(assertion, msg = msg) {
  if(SHOULD_RUN_ASSERTIONS) {
    assert_that(
      assertion,
      msg = msg
    )
  }
}
```

## Import and Clean Data

```{r}
RAW_DATA_FILE_PATH = "water-quality-raw/"

OUTPUT_FILE_PATH = "water-quality-output/"

```

### Water Station Fires

```{r}
water_station_fires_raw = readxl::read_excel(paste(RAW_DATA_FILE_PATH, 'WaterStationSites-3-5-24.xlsx', sep = ''))

water_station_fires = water_station_fires_raw |> 
  # rename all the columns used for analysis
  rename(
    station_code = `StationCode`,
    fire_start = `ALARM_DATE`, 
    fire_contained = `CONT_DATE`, 
    fire_name = `FIRE_NAME`,
    fire_distance = `FireDistance`,
    elevation = `Elevation`,
    near_rank = `NEAR_RANK`
) |> 
  mutate(
    fire_start = ymd(fire_start),
    fire_contained = ymd(fire_contained)
  ) 
```

### Water Stations

```{r}
water_stations_grouped_raw = read_csv(paste(RAW_DATA_FILE_PATH, '1kmWaterStationsGroup.csv', sep = ''))

water_stations_grouped = water_stations_grouped_raw |> 
  rename(
    station_code = `StationCode`,
    group_id = `GROUP_ID`
  ) |> 
  select(
    c(station_code, group_id)
  )

water_stations = water_station_fires |> 
  select(-c(
    fire_name,
    fire_start,
    fire_contained,
    YEAR_,
    FireSize,
    fire_distance,
    near_rank # not sure about this one
  )) |> unique()

assert(
  identical(water_stations_grouped |> arrange(station_code) |> (`[[`)("station_code"), water_stations |> arrange(station_code) |> (`[[`)("station_code")),
  msg = "Should have matching stations"
)

assert(
  water_station_fires_raw$StationCode |> unique() |> length() == water_stations |> nrow(),
  msg = "Columns selected for water station dataframe should uniquely identify water stations"
)

water_stations = inner_join(
  water_stations,
  water_stations_grouped
)

# think more about how we're doing this but this is fine for now
water_station_fires = inner_join(
  water_station_fires,
  water_stations
)
```

### Water Quality

```{r}
water_quality_raw = read_tsv(paste(RAW_DATA_FILE_PATH, "analytes.tsv", sep = ''))

water_quality = water_quality_raw |> rename(
  # rename all the columns used for analysis
  station_code = `StationCode`, 
  analyte = `Analyte`,             
  unit = `Unit`,           
  result = `Result`,        
  sample_date = `SampleDate`, 
  collection_time = `CollectionTime`, 
  ) |>  
  mutate(sample_date_time = mdy_hms(sample_date))

hour(water_quality$sample_date_time) = hour(mdy_hms(water_quality$collection_time))
minute(water_quality$sample_date_time) = minute(mdy_hms(water_quality$collection_time))
second(water_quality$sample_date_time) = second(mdy_hms(water_quality$collection_time))

water_quality = water_quality |> 
  select(-c(sample_date, collection_time))

```

## Clean Data

1.  Get only water quality for stations that we have data for

```{r}
water_quality = water_quality |> 
  filter(station_code %in% water_station_fires$station_code) 

```

2.  Inspect differences in units

```{r}
water_quality |> group_by(analyte, unit) |> 
  summarise(
    count = n()
  )

water_quality |> group_by(analyte) |> 
  summarise(
    count = n()
  )
```

3.  There are only 29 of 3135 phosphorus measurements that are not mg/L, and since it is dry weight, we can't easily convert, so we'll drop the measurements that are not m/L

```{r}
water_quality = water_quality |> 
  # drop inorganic nitrogen
  filter(analyte != "Nitrogen, Inorganic, Total") |> 
  
  # drop phosphorus with uncommon units
  filter(!(analyte == "Phosphorus as P, Total" & unit != "mg/L")
  )
```

4.  Get selected analytes names

```{r}
analytes_of_interest = water_quality$analyte |> unique()
```

## Create sets of analytes

1.  Fire cutoff

    ```{r}
    fire_cutoff = function(water_station_fires, max_fire_distance) {
      water_station_fires |>
        filter(fire_distance < max_fire_distance)
    }
    ```

2.  Create a site-interval with the desired time interval

    ```{r}
    get_water_station_intervals = function(water_station_fires, date_interval, water_quality) {
      start_date = min(water_quality$sample_date_time)
      end_date = max(water_quality$sample_date_time)

      day_interval = interval(start_date,end_date)/date_interval
      dates = start_date + 0:day_interval*date_interval
      next_date = dates + date_interval

      
      dates = as.data.frame(dates) |> 
        rename(interval_start = dates) |> 
        mutate(interval_start = as.Date(interval_start),
               interval_end = as.Date(next_date)) |> 
        mutate(date_interval = interval(interval_start, interval_end)) 

        station_codes = water_station_fires |> select(c(station_code)) |> 
      unique()

      tidyr::crossing(station_codes, dates)
    }
    ```

3.  Use a rolling join to join water quality with most recent fire

    ```{r}
    map_analyte_to_most_recent_fire = function(water_quality, water_station_fires) {
      analytes_with_most_recent_fire = inner_join(
        water_quality |> 
          select(station_code, analyte, unit, sample_date_time, result),
        water_station_fires |> 
          select(station_code, fire_name, fire_start, fire_contained),
        by = join_by(
          station_code,
          closest(sample_date_time >= fire_start)
        )
      ) |> mutate(
        time_since_last_fire = case_when(
          sample_date_time >= fire_contained ~ as.Date(sample_date_time) - fire_contained,
          sample_date_time < fire_contained ~ ddays(0)
        )
      )
      
      analytes_with_most_recent_fire |> 
        rename(
          sample.previous_fire_name = fire_name,
          sample.previous_fire_start = fire_start,
          sample.previous_fire_contained = fire_contained,
          sample.duration_since_last_fire = time_since_last_fire
        )
    }
    ```

4.  Perform a rolling join to match water_station interval with most recent fire

    ```{r}
    match_water_station_interval_to_most_recent_fire = function(
        water_station_intervals,
        water_station_fires
      ) {
      
      inner_join(
        water_station_intervals, 
        water_station_fires,
        by = join_by(
          station_code,
          # note - there are sometimes duplicate station intervals because of the closest issue 
          closest(interval_start >= fire_start)
        )
      ) |> rename(
        site_interval.previous_fire_start = fire_start,
        site_interval.previous_fire_name = fire_name,
        site_interval.previous_fire_contained = fire_contained
      )
    }
    ```

5.  match water quality measurement with water station / interval. If the water quality measurement has a most recent fire that is more recent than the interval start, set the interval start for that row to the most recent fire, and treat it as a different interval\

    ```{r}
    match_water_quality_to_water_station_interval = function(water_quality_with_most_recent_fire, water_stations_with_recent_fire) {
      water_quality_for_observation = inner_join(
        water_quality_with_most_recent_fire,
        water_stations_with_recent_fire,
        by = join_by(
          station_code,
          closest(sample_date_time >= interval_start)
        )
      ) |> 
        # Create a new interval when the sample previous fire date is different from the site previous fire date - this happens if there was a fire since the interval started
        mutate(
        interval_start = case_when(
          site_interval.previous_fire_start != sample.previous_fire_start ~ sample.previous_fire_start,
          .default = interval_start
        ),
        site_interval.previous_fire_start = case_when(
          site_interval.previous_fire_start != sample.previous_fire_start ~ sample.previous_fire_start,
          .default = site_interval.previous_fire_start
        )
      )
    }
    ```

6.  Get average analyte value per water station interval

    ```{r}
    get_mean_water_quality_per_analyte = function(
        water_quality_by_water_station_interval
      ) {
      # group by station, analyte, and interval_start, plus any other values that are unique per group to retain its value 
      group_water_quality = function(water_quality_for_observation) {
      water_quality_for_observation |> 
        group_by(
          station_code,
          date_interval,
          interval_start,
          analyte,
          unit,
          elevation,
          group_id
        )
      }
      
      assert(water_quality_by_water_station_interval |> 
               group_by(
                 station_code, 
                 interval_start,
                 analyte,
               ) |>
               n_groups() == 
             water_quality_by_water_station_interval |>
               group_water_quality() |> 
               n_groups(),
             msg = "Grouping by additional values should not increase the number of groups, since they should be unique")
      
      water_quality_by_water_station_interval |> 
      # dropped the ones that are after the interval start for now
      filter(interval_start == int_start(date_interval)) |> 
      group_water_quality() |> 
      summarise(
        result = mean(result),
        last_fire_start = unique(site_interval.previous_fire_start),
        last_fire_contained = max(site_interval.previous_fire_contained),
        last_fire_distance = min(fire_distance)
      ) |> ungroup() |> 
      mutate(
        time_since_last_fire = case_when(
          interval_start > last_fire_contained ~ interval_start - last_fire_contained,
          .default = ddays(0)
        )
      )
    }
    ```

7.  Pivot wider

    ```{r}
    get_stations_with_analytes = function(mean_water_quality_for_observation) {
      stations_with_analytes = mean_water_quality_for_observation |> 
      pivot_wider(
        id_cols = c(
          station_code, 
          date_interval, 
          interval_start, 
          last_fire_start, 
          last_fire_contained, 
          time_since_last_fire,
          elevation,
          group_id,
          last_fire_distance),
        names_from = analyte,
        values_from = result) |> 
      rename(
        phosphorus_mg_l = "Phosphorus as P, Total",
        dissolved_organic_carbon_mg_l = "Dissolved Organic Carbon, Dissolved",
        total_suspended_solids_mg_l = "Total Suspended Solids, Total",
        nitrogen_organic_mg_l = "Nitrogen, Organic, Total"
      ) |> select(
        -c(nitrogen_organic_mg_l, phosphorus_mg_l) 
      ) |>
      filter(
        !is.na(total_suspended_solids_mg_l) &
        !is.na(dissolved_organic_carbon_mg_l) &
        !is.na(pH)    
      ) |> 
      mutate(
        site_id = paste(station_code, date_interval, sep=":")
      ) 
    }
    ```

8.  Prepare Water Quality Multivariate Objects

    ```{r}
    prepare_water_quality_matrix = function(stations_with_analytes) {
      colnames(stations_with_analytes)
      multivariate_df = stations_with_analytes |> 
        #filter(group_id == 162) |>
        select(
          site_id, 
          dissolved_organic_carbon_mg_l, 
          pH, 
          total_suspended_solids_mg_l 
        )
      
      multivariate_matrix = as.matrix(multivariate_df[2:ncol(multivariate_df)])
      
      rownames(multivariate_matrix) = multivariate_df$site_id
      
      list(
        "multivariate_matrix" = multivariate_matrix,
        "stations_with_analytes" = stations_with_analytes)
    }
    ```

Define function to get analytes

```{r}
do_the_thing = function(
    water_stations,
    water_station_fires,
    water_quality,
    max_fire_distance = Inf,
    max_time_since_last_fire = Inf,
    date_interval_for_observations,
    station_groups = NULL
) {
  
  # 1. Filter out fires outside of fire cutoff, if applicable
  water_station_fires = fire_cutoff(
    water_station_fires, 
    max_fire_distance
  )
  
  # 2. Create a site-interval with desired time interval
  water_station_intervals = get_water_station_intervals(
    water_station_fires, 
    date_interval_for_observations, 
    water_quality
  )
  
  # 3. 
  water_quality_with_most_recent_fire = 
    map_analyte_to_most_recent_fire(
      water_quality, 
      water_station_fires
    )
  
  # 4. 
  water_stations_with_recent_fire = 
    match_water_station_interval_to_most_recent_fire(
      water_station_intervals,
      water_station_fires
    )
  
  # 5.
  water_quality_by_water_station_interval = 
    match_water_quality_to_water_station_interval(
      water_quality_with_most_recent_fire,
      water_stations_with_recent_fire
    )
  
  # 6. 
  mean_water_quality_for_observation = get_mean_water_quality_per_analyte(
    water_quality_by_water_station_interval
  )

  # 7. 
  stations_with_analytes = get_stations_with_analytes(mean_water_quality_for_observation)
  
  if(!is.null(station_groups)) {
    stations_with_analytes = stations_with_analytes |> 
             filter(group_id %in% station_groups)
  }
  
  if(!is.null(date_interval_for_observations)) {
    stations_with_analytes = stations_with_analytes |> 
      filter(time_since_last_fire < max_time_since_last_fire)
  }
  
  # 8. 
  multivariate_objects = prepare_water_quality_matrix(stations_with_analytes)
  
  multivariate_matrix = multivariate_objects$multivariate_matrix
  stations_with_analytes = multivariate_objects$stations_with_analytes
  
  # reformat columns for figures
  colnames(multivariate_matrix) = c("DOC", "pH", "TSS")
  stations_with_analytes = stations_with_analytes |> 
    mutate(
      days_since_last_fire = as.numeric(time_since_last_fire, "days")
    )
  
  list(
    "stations_with_analytes" = stations_with_analytes,
    "multivariate_matrix" = multivariate_matrix
   )
}
```

## PCA function

```{r}

output_plot = function(output, plot_name, analysis_name) {
  if(SHOULD_WRITE_FILES) {
    ggsave(plot = output, width = FIGURE_WIDTH, height = FIGURE_HEIGHT,filename=paste(OUTPUT_FILE_PATH, analysis_name,"-",plot_name, ".jpg", sep = ""))
  }
 print(output)
}

run_PCA = function(result, analysis_name, analysis_title) { 
  multivariate_matrix = result$multivariate_matrix
  stations_with_analytes = result$stations_with_analytes
  
  results_pca = prcomp(multivariate_matrix, scale = TRUE)

  eig = fviz_eig(results_pca) + 
    labs(title = paste("Scree plot", analysis_title, sep = " - "))

  output_plot(eig, "eig-chart", analysis_name)

  
  
  biplot_time = fviz_pca_biplot(results_pca,
                  label="var",
                  col.ind = (stations_with_analytes$days_since_last_fire)) +
      scale_color_continuous(name = "Days since last fire", type = "viridis") +
      coord_cartesian(clip = "off") +
      labs(title = paste("PCA Biplot", analysis_title, sep = " - "))

  output_plot(biplot_time, "days-since-last-fire", analysis_name)
  
  biplot_distance = fviz_pca_biplot(results_pca,
                  label="var",
                  col.ind = stations_with_analytes$last_fire_distance) +
    scale_color_continuous(name = "Last Fire Distance", type = "viridis") +
    coord_cartesian(clip = "off") +
    labs(title = paste("PCA Biplot", analysis_title, sep = " - "))

  output_plot(biplot_distance, "last-fire-distance", analysis_name)
  
  biplot_elevation = fviz_pca_biplot(results_pca,
                  label="var",
                  col.ind = stations_with_analytes$elevation) +
    scale_color_continuous(name = "Elevation", type = "viridis") +
    coord_cartesian(clip = "off") + 
    labs(title = paste("PCA Biplot", analysis_title, sep = " - "))

  output_plot(biplot_elevation, "elevation", analysis_name)

  
  variables = fviz_pca_var(results_pca,
               col.var = "contrib", # Color by contributions to the PC
               gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
               repel = TRUE     # Avoid text overlapping
               ) + 
          labs(title = paste("Variables - PCA", analysis_title, sep = " - "))

  output_plot(variables, "variable-contribution", analysis_name)
}
```

## Results

### No limit to time since last fire

```{r}
result = do_the_thing(
  water_stations, 
  water_station_fires, 
  water_quality,
  max_fire_distance = 1000, 
  max_time_since_last_fire = Inf,
  date_interval_for_observations = dmonths(1)
)

stations_with_analytes = result$stations_with_analytes
multivariate_matrix = result$multivariate_matrix
```

#### PERMANOVA

```{r}
output_adonis = function(model, model_name, analysis_name) {
  if(SHOULD_WRITE_FILES) {
    write.csv(model, paste(OUTPUT_FILE_PATH, analysis_name,"-",model_name, ".csv", sep = ""))
  }
  model
}
```

```{r}
output_adonis(
  adonis2(
    vegdist(multivariate_matrix, method = "bray") ~ last_fire_distance * time_since_last_fire * elevation, 
    data = stations_with_analytes
  ), 
  "distance-time-elevation-interactions", "no-limit"
)

output_adonis(
  adonis2(
    vegdist(multivariate_matrix, method = "bray") ~ last_fire_distance + time_since_last_fire + elevation, data = stations_with_analytes
  ),
  "distance-time-elevation-no-interactions", "no-limit"
)

output_adonis(
  adonis2(
    vegdist(multivariate_matrix, method = "bray") ~ last_fire_distance * time_since_last_fire, data = stations_with_analytes
  ),
  "distance-time-interactions", "no-limit"
)

output_adonis(
  adonis2(
    vegdist(multivariate_matrix, method = "bray") ~ time_since_last_fire, data = stations_with_analytes
  ),
  "time", "no-limit")
```

#### PCA

```{r}
run_PCA(result, analysis_name = "no-limit", analysis_title = "All Groups")

```

Looks like the interactions between all three is the only significant factor, which seems like it could be influenced more by differences in environmental variables based on location than on fire history.

### Limit to group ID

Group ID groups stations within 1km of one another.

```{r}
stations_with_analytes |> group_by(group_id) |> 
  summarise(
    count = n()
  ) |> 
  arrange()
```

Group ID with greatest number of readings is 162

```{r}
result = do_the_thing(
  water_stations, 
  water_station_fires, 
  water_quality,
  max_fire_distance = 1000, 
  max_time_since_last_fire = Inf,
  date_interval_for_observations = dmonths(1),
  station_groups = c(162)
)

 stations_with_analytes = result$stations_with_analytes
 multivariate_matrix = result$multivariate_matrix

```

#### PERMANOVA

Can remove elevation, since they are all in roughly the same location.

```{r}
output_adonis(
  adonis2(
    vegdist(multivariate_matrix, method = "bray") ~ last_fire_distance * time_since_last_fire , data = stations_with_analytes
    ),
  "distance-time-interactions",
  "1km-group"
)
  
output_adonis(
  adonis2(
    vegdist(multivariate_matrix, method = "bray") ~ last_fire_distance + time_since_last_fire, data = stations_with_analytes
  ),
  "distance-time-no-interactions",
  "1km-group"
)

output_adonis(
  adonis2(
    vegdist(multivariate_matrix, method = "bray") ~ time_since_last_fire, data = stations_with_analytes
  ),
  "time",
  "1km-group"
)
```

#### PCA

```{r}
run_PCA(result, "1km-group", "Stations within 1km")
```

Seem to have some outliers in Days since last fire, so we'll remove them by setting a max time since last fire.

```{r}
stations_with_analytes |> ggplot(aes(x = days_since_last_fire)) + 
  geom_histogram()
```

### Max time since last fire = 1000 days

```{r}
result = do_the_thing(
  water_stations, 
  water_station_fires, 
  water_quality,
  max_fire_distance = 1000, 
  max_time_since_last_fire = ddays(1000),
  date_interval_for_observations = dmonths(1),
  station_groups = c(162)
)

 stations_with_analytes = result$stations_with_analytes
 multivariate_matrix = result$multivariate_matrix
```

#### PERMANOVA

Can remove elevation, since they are all in roughly the same location.

```{r}
output_adonis(
  adonis2(
    vegdist(multivariate_matrix, method = "bray") ~ last_fire_distance * time_since_last_fire , data = stations_with_analytes
    ),
  "distance-time-interactions",
  "max-1000-days-since-last-fire"
)

output_adonis(
  adonis2(
    vegdist(multivariate_matrix, method = "bray") ~ last_fire_distance + time_since_last_fire, data = stations_with_analytes
  ),
  "distance-time-no-interactions",
  "max-1000-days-since-last-fire"
)

output_adonis(
  adonis2(
    vegdist(multivariate_matrix, method = "bray") ~ time_since_last_fire, data = stations_with_analytes
  ),
  "distance-time-no-interactions",
  "max-1000-days-since-last-fire"
)
```

#### PCA

```{r}
run_PCA(result, "max-1000-days-since-last-fire", "Stations within 1km with measurements\nwithin 1000 days of last fire")
```
